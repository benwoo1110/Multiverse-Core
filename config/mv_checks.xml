<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~ Multiverse 2 Copyright (c) the Multiverse Team 2011.                      ~
  ~ Multiverse 2 is licensed under the BSD License.                           ~
  ~ For more information please check the README.md file included             ~
  ~ with this project.                                                        ~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">
<!-- Future reference: valid severity values are 'ignore', 'info', 'warning', 'error' -->
<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="fileExtensions" value="java, properties, xml"/>
    <property name="severity" value="warning"/>

    <!-- Javadoc Comments -->
    <module name="JavadocPackage"/><!-- require package-info.java file -->

    <!-- Miscellaneous -->
    <module name="NewlineAtEndOfFile" />
    <module name="OrderedProperties"/>
    <module name="Translation"/>
    <module name="UniqueProperties"/>

    <!-- Regexp -->
    <module name="RegexpSingleline">
        <property name="message" value="Line has trailing spaces."/>
        <property name="format" value="\s+$"/>
    </module>

    <!-- Size Violations -->
    <module name="FileLength">
        <property name="max" value="2000"/>
    </module>
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="120"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <!-- Whitespace -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>

    <module name="TreeWalker">
        <!-- Make suppression possible -->
        <module name="SuppressWithNearbyCommentFilter">
            <property name="commentFormat" value="SUPPRESS CHECKSTYLE: (\w+)"/>
            <property name="checkFormat" value="$1"/>
        </module>
        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="BEGIN CHECKSTYLE-SUPPRESSION\: (\w+)"/>
            <property name="onCommentFormat" value="END CHECKSTYLE-SUPPRESSION\: (\w+)"/>
            <property name="checkFormat" value="$1"/>
        </module>
        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="BEGIN CHECKSTYLE-SUPPRESSION\: ALL"/>
            <property name="onCommentFormat" value="END CHECKSTYLE-SUPPRESSION\: ALL"/>
        </module>

        <!-- Actual checks -->

        <!-- Annotations -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, PACKAGE_DEF, ENUM_CONSTANT_DEF,
                    ENUM_DEF, METHOD_DEF, CTOR_DEF, RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="AnnotationLocation"/>
        <module name="AnnotationUseStyle"/>
        <module name="MissingDeprecated"/>
        <module name="MissingOverride"/>

        <!-- Block Checks -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock">
            <property name="tokens"
                      value="LITERAL_WHILE, LITERAL_TRY, LITERAL_FINALLY, LITERAL_DO, LITERAL_IF,
                    LITERAL_ELSE, LITERAL_FOR, INSTANCE_INIT, STATIC_INIT, LITERAL_SWITCH,
                    LITERAL_SYNCHRONIZED"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="(ignore|expect)"/>
        </module>
        <module name="LeftCurly">
            <property name="ignoreEnums" value="false"/>
            <property name="tokens"
                      value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,
                    INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,
                    LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,
                    OBJBLOCK, STATIC_INIT, RECORD_DEF, COMPACT_CTOR_DEF"/>
        </module>
        <module name="NeedBraces">
            <property name="id" value="SingleLineIf"/>
            <property name="tokens" value="LITERAL_IF"/>
            <property name="allowSingleLineStatement" value="true"/>
        </module>
        <module name="NeedBraces">
            <property name="id" value="NoSingleLineControl"/>
            <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property name="tokens"
                      value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,
                    INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF,
                    COMPACT_CTOR_DEF, LITERAL_SWITCH"/>
        </module>

        <!-- Class Design -->
        <module name="DesignForExtension">
            <property name="severity" value="info"/>
        </module>
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="InnerTypeLast"/>
        <module name="InterfaceIsType"/>
        <module name="MutableException"/>
        <module name="OneTopLevelClass"/>
        <module name="ThrowsCount">
            <property name="max" value="2"/>
        </module>
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>

        <!-- Coding -->
        <module name="ArrayTrailingComma"/>
        <module name="AvoidDoubleBraceInitialization"/>
        <module name="AvoidNoArgumentSuperConstructorCall"/>
        <module name="CovariantEquals"/>
        <module name="DeclarationOrder">
            <!-- Doesn't respect static methods at top -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="DefaultComesLast"/>
        <module name="EmptyStatement"/>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="FallThrough">
            <property name="checkLastCaseGroup" value="true"/>
        </module>
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
            <property name="setterCanReturnItsClass" value="true"/>
            <property name="ignoreAbstractMethods" value="true"/>
            <!-- Not smart enough -->
            <property name="severity" value="ignore"/>
        </module>
        <module name="IllegalCatch"/>
        <module name="IllegalThrows"/>
        <module name="IllegalToken"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
        <module name="IllegalType"/>
        <module name="InnerAssignment"/>
        <module name="MagicNumber">
            <property name="ignoreHashCodeMethod" value="true"/>
            <property name="ignoreAnnotationElementDefaults" value="true"/>
        </module>
        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleStringLiterals">

        </module>
        <module name="MultipleVariableDeclarations"/>
        <module name="NestedForDepth">
            <property name="severity" value="warning"/>
        </module>
        <module name="NestedIfDepth"/>
        <module name="NestedTryDepth"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="OneStatementPerLine"/>
        <module name="PackageDeclaration"/>
        <module name="ParameterAssignment"/>
        <module name="RequireThis"/>
        <module name="ReturnCount">
            <property name="severity" value="info"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="UnnecessaryParentheses"/>
        <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
        <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
        <module name="UnnecessarySemicolonInEnumeration"/>
        <module name="UnnecessarySemicolonInTryWithResources"/>
        <module name="UnusedLocalVariable"/>
        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="3"/>
            <property name="validateBetweenScopes" value="false"/>
        </module>
        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="5"/>
            <property name="validateBetweenScopes" value="true"/>
        </module>

        <!-- Imports -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun"/>
        </module>
        <module name="ImportOrder">
            <property name="option" value="bottom"/>
            <property name="ordered" value="true"/>
            <property name="separated" value="true"/>
            <property name="separatedStaticGroups" value="true"/>
            <property name="caseSensitive" value="true"/>
            <property name="sortStaticImportsAlphabetically" value="true"/>
            <property name="groups"
                      value="java,javax,*,org.mvplugins"/>
            <property name="staticGroups"
                      value="/^.*$/"/>
        </module>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <!-- Javadoc Comments -->
        <module name="AtclauseOrder">
            <property name="target"
                      value="CLASS_DEF, COMPACT_CTOR_DEF, CTOR_DEF, ENUM_DEF,
                    INTERFACE_DEF, METHOD_DEF, RECORD_DEF, VARIABLE_DEF"/>
        </module>
        <module name="InvalidJavadocPosition"/>
        <module name="JavadocBlockTagLocation"/>
        <module name="JavadocContentLocationCheck"/>
        <module name="JavadocMethod">
            <property name="accessModifiers" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF, COMPACT_CTOR_DEF"/>
        </module>
        <module name="JavadocMethod">
            <property name="accessModifiers" value="public"/>
        </module>
        <module name="JavadocMissingLeadingAsterisk"/>
        <module name="JavadocMissingWhitespaceAfterAsterisk"/>
        <module name="JavadocParagraph">
            <property name="allowNewlineParagraph" value="true"/>
        </module>
        <module name="JavadocStyle">
            <property name="scope" value="package"/>
        </module>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="JavadocType"/>
        <module name="JavadocVariable">
            <property name="scope" value="package"/>
        </module>
        <module name="MissingJavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
        </module>
        <module name="MissingJavadocMethod">
            <property name="scope" value="protected"/>
            <property name="excludeScope" value="public"/>
            <property name="allowMissingPropertyJavadoc" value="true"/>
            <property name="minLineCount" value="2"/>
        </module>
        <module name="MissingJavadocType">
            <property name="scope" value="protected"/>
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                      RECORD_DEF, ANNOTATION_DEF"/>
            <property name="excludeScope" value="nothing"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="RequireEmptyLineBeforeBlockTagGroup"/>
        <module name="SingleLineJavadoc"/>
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                      value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <module name="WriteTag">
            <property name="tag" value="@author"/>
            <property name="tagFormat" value="\S"/>
            <property name="severity" value="ignore"/>
            <property name="tagSeverity" value="warning"/>
        </module>

        <!-- Metrics -->
        <module name="BooleanExpressionComplexity"/>
        <module name="ClassDataAbstractionCoupling">
            <property name="max" value="7"/>
            <property name="excludedClasses"
                      value="ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte, Character,
                      Class, Collection, Deprecated, Deque, Double, DoubleStream, EnumSet, Exception,
                      Float, FunctionalInterface, HashMap, HashSet, IllegalArgumentException,
                      IllegalStateException, IndexOutOfBoundsException, IntStream, Integer,
                      LinkedHashMap, LinkedHashSet, LinkedList, List, Long, LongStream, Map,
                      NullPointerException, Object, Optional, OptionalDouble, OptionalInt,
                      OptionalLong, Override, Queue, RuntimeException, SafeVarargs, SecurityException,
                      Set, Short, SortedMap, SortedSet, Stream, String, StringBuffer, StringBuilder,
                      SuppressWarnings, Throwable, TreeMap, TreeSet, UnsupportedOperationException,
                      Void, boolean, byte, char, double, float, int, long, short, var, void"/>
        </module>
        <module name="ClassFanOutComplexity">
            <property name="id" value="FanOutComplexityGettingTooHigh"/>
            <property name="max" value="20"/>
            <property name="excludedClasses"
                      value="ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte, Character,
                      Class, Collection, Deprecated, Deque, Double, DoubleStream, EnumSet, Exception,
                      Float, FunctionalInterface, HashMap, HashSet, IllegalArgumentException,
                      IllegalStateException, IndexOutOfBoundsException, IntStream, Integer,
                      LinkedHashMap, LinkedHashSet, LinkedList, List, Long, LongStream, Map,
                      NullPointerException, Object, Optional, OptionalDouble, OptionalInt,
                      OptionalLong, Override, Queue, RuntimeException, SafeVarargs, SecurityException,
                      Set, Short, SortedMap, SortedSet, Stream, String, StringBuffer, StringBuilder,
                      SuppressWarnings, Throwable, TreeMap, TreeSet, UnsupportedOperationException,
                      Void, boolean, byte, char, double, float, int, long, short, var, void"/>
            <property name="severity" value="info"/>
        </module>
        <module name="ClassFanOutComplexity">
            <property name="id" value="FanOutComplexityProbablyTooHigh"/>
            <property name="max" value="35"/>
            <property name="excludedClasses"
                      value="ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte, Character,
                      Class, Collection, Deprecated, Deque, Double, DoubleStream, EnumSet, Exception,
                      Float, FunctionalInterface, HashMap, HashSet, IllegalArgumentException,
                      IllegalStateException, IndexOutOfBoundsException, IntStream, Integer,
                      LinkedHashMap, LinkedHashSet, LinkedList, List, Long, LongStream, Map,
                      NullPointerException, Object, Optional, OptionalDouble, OptionalInt,
                      OptionalLong, Override, Queue, RuntimeException, SafeVarargs, SecurityException,
                      Set, Short, SortedMap, SortedSet, Stream, String, StringBuffer, StringBuilder,
                      SuppressWarnings, Throwable, TreeMap, TreeSet, UnsupportedOperationException,
                      Void, boolean, byte, char, double, float, int, long, short, var, void"/>
        </module>
        <module name="CyclomaticComplexity">
            <property name="max" value="7"/>
            <property name="severity" value="warning"/>
        </module>
        <module name="JavaNCSS">
            <property name="methodMaximum" value="50"/>
            <property name="classMaximum" value="1500"/>
            <property name="fileMaximum" value="2000"/>
            <property name="recordMaximum" value="150"/>
        </module>
        <module name="NPathComplexity">
            <property name="max" value="200"/>
        </module>

        <!-- Miscellaneous -->
        <module name="ArrayTypeStyle"/>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="CommentsIndentation">
            <property name="tokens" value="SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN"/>
        </module>
        <module name="Indentation">
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="4"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="8"/>
            <property name="arrayInitIndent" value="4"/>
            <property name="lineWrappingIndentation" value="8"/>
            <property name="forceStrictCondition" value="false"/>
        </module>
        <module name="NoCodeInFile"/>
        <module name="OuterTypeFilename"/>
        <module name="TodoComment">
            <property name="format" value="TODO"/>
            <!-- TODO change back to warning after MV5 -->
            <property name="severity" value="info"/>
        </module>
        <module name="TrailingComment">
            <property name="legalComment" value="^\sSUPPRESS CHECKSTYLE:"/>
        </module>
        <module name="UncommentedMain"/>
        <module name="UpperEll"/>

        <!-- Modifiers -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Naming Conventions -->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="0"/>
            <property name="allowedAbbreviations" value="MV"/>
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF,
                    PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, PATTERN_VARIABLE_DEF, RECORD_DEF,
                    RECORD_COMPONENT_DEF"/>
        </module>
        <module name="AbstractClassName">
            <property name="ignoreName" value="true"/>
            <message key="name.invalidPattern"
                     value="Abstract class name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z]{1,3}$"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ConstantName">
            <message key="name.invalidPattern"
                     value="Constant name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z]{1,3}$"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local final variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$|^[A-Z][A-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodName">
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="^[A-Z]{1,3}$"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="PackageName">
            <property name="severity" value="info"/>
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="PatternVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Pattern variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="RecordComponentName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Record component name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="RecordTypeParameterName">
            <property name="format" value="^[A-Z]{1,3}$"/>
            <message key="name.invalidPattern"
                     value="Record type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="StaticVariableName">
            <message key="name.invalidPattern"
                     value="Static variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                    ANNOTATION_DEF, RECORD_DEF"/>
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!-- Size Violations -->
        <module name="AnonInnerLength">
            <property name="max" value="20"/>
        </module>
        <module name="ExecutableStatementCount">
            <property name="max" value="30"/>
        </module>
        <module name="LambdaBodyLength">
            <property name="id" value="LambdaGettingTooLong"/>
            <property name="max" value="10"/>
            <property name="severity" value="info"/>
        </module>
        <module name="LambdaBodyLength">
            <property name="id" value="LambdaProbablyTooLong"/>
            <property name="max" value="25"/>
        </module>
        <module name="MethodCount">
            <property name="maxTotal" value="100"/>
            <property name="maxPrivate" value="100"/>
            <property name="maxPackage" value="100"/>
            <property name="maxProtected" value="100"/>
            <property name="maxPublic" value="100"/>
        </module>
        <module name="MethodLength">
            <property name="max" value="50"/>
            <property name="severity" value="warning"/>
        </module>
        <module name="OuterTypeNumber">
            <property name="max" value="1"/>
        </module>
        <module name="ParameterNumber">
            <property name="id" value="ConsiderLessMethodParameters"/>
            <property name="max" value="4"/>
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="severity" value="info"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>
        <module name="ParameterNumber">
            <property name="id" value="ProbablyTooManyMethodParameters"/>
            <property name="max" value="10"/>
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>
        <module name="ParameterNumber">
            <property name="id" value="ConsiderLessConstructorParameters"/>
            <property name="max" value="7"/>
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="severity" value="info"/>
            <property name="tokens" value="CTOR_DEF"/>
        </module>
        <module name="ParameterNumber">
            <property name="id" value="ProbablyTooManyConstructorParameters"/>
            <property name="max" value="12"/>
            <property name="ignoreOverriddenMethods" value="true"/>
            <property name="tokens" value="CTOR_DEF"/>
        </module>
        <module name="RecordComponentNumber">
            <property name="max" value="8"/>
        </module>

        <!-- Whitespace -->
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyForIteratorPad"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
            <property name="tokens"
                      value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                    STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF, RECORD_DEF,
                    COMPACT_CTOR_DEF"/>
        </module>
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="MethodParamPad">
            <property name="tokens"
                      value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF,
                    SUPER_CTOR_CALL, ENUM_CONSTANT_DEF, RECORD_DEF"/>
        </module>
        <module name="NoLineWrap">
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT"/>
        </module>
        <module name="NoWhitespaceAfter">
            <property name="tokens"
                      value="AT, INC, DEC, UNARY_MINUS,UNARY_PLUS,BNOT,LNOT,DOT,ARRAY_DECLARATOR,INDEX_OP,LITERAL_SYNCHRONIZED,METHOD_REF"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="id" value="AllowedWhitespaceBeforeWithoutLinebreak"/>
            <property name="tokens"
                      value="COMMA, SEMI, POST_INC, POST_DEC, ELLIPSIS, LABELED_STAT"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="id" value="AllowedWhitespaceBeforeWithLinebreak"/>
            <property name="tokens" value="DOT, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="NoWhitespaceBeforeCaseDefaultColon"/>
        <module name="OperatorWrap">
            <property name="tokens"
                      value="QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD,
                    SR, BSR, GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF,
                    TYPE_EXTENSION_AND, ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN,
                    STAR_ASSIGN, MOD_ASSIGN, SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN,
                    BOR_ASSIGN, BAND_ASSIGN, METHOD_REF"/>
        </module>
        <module name="ParenPad">
            <property name="tokens"
                      value="ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF,
                    EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL,
                    METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA,
                    RECORD_DEF"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapNl"/>
            <property name="option" value="nl"/>
            <property name="tokens" value="DOT, AT, METHOD_REF"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapEol"/>
            <property name="option" value="eol"/>
            <property name="tokens"
                      value="COMMA, SEMI, ELLIPSIS, RPAREN, ARRAY_DECLARATOR, RBRACK"/>
        </module>
        <module name="SingleSpaceSeparator"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter">
            <property name="tokens"
                      value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_RETURN,
                    LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_FINALLY, DO_WHILE, ELLIPSIS,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_CATCH, LAMBDA,
                    LITERAL_YIELD, LITERAL_CASE"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="ignoreEnhancedForColon" value="false"/>
            <property name="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,
                    BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND,
                    LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                    LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,
                    LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
                    NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,
                    SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks
               may only be represented as '{}' when not part of a multi-block statement"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
    </module>
</module>
